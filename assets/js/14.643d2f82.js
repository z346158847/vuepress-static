(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{509:function(t,s,e){"use strict";e.r(s);var a=e(4),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"防火墙相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#防火墙相关"}},[t._v("#")]),t._v(" 防火墙相关")]),t._v(" "),e("p",[e("strong",[t._v("systemctl")])]),t._v(" "),e("p",[e("strong",[t._v("firewalld的基本使用")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("启动：systemctl start firewalld\n查看： systemctl status firewalld\n停止： systemctl disable firewalld\n禁用： systemctl stop firewalld\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("systemctl的基本使用")]),t._v("\n服务")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("启动一个服务：systemctl start firewalld.service\n关闭一个服务：systemctl stop firewalld.service\n重启一个服务：systemctl restart firewalld.service\n显示一个服务的状态：systemctl status firewalld.service\n在开机时启用一个服务：systemctl enable firewalld.service\n在开机时禁用一个服务：systemctl disable firewalld.service\n")])])]),e("p",[t._v("端口")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("查看所有打开的端口： firewall-cmd --zone=public --list-ports\n开启一个端口：firewall-cmd --zone=public --add-port=80/tcp --permanent （--permanent永久生效，没有此参数重启后失效）\n更新防火墙规则： firewall-cmd --reload\n查看一个端口：firewall-cmd --zone= public --query-port=80/tcp\n删除一个端口：firewall-cmd --zone= public --remove-port=80/tcp --permanent\n")])])]),e("h2",{attrs:{id:"查询相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询相关"}},[t._v("#")]),t._v(" 查询相关")]),t._v(" "),e("p",[e("strong",[t._v("find")]),t._v(" "),e("strong",[t._v("按规则查找某个文件或文件夹，包括子目录")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("find . -name '*.sh' -- 以.sh结尾的文件\nfind . -name '*channel*' -- 包含channel字符的文件\nfind . -name 'build*' -- 以build开头的文件\nfind . -name 'abc??' -- abc后面有两个字符的文件\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("grep")]),e("br"),t._v(" "),e("strong",[t._v("查找内容包含指定的范本样式的文件，Global Regular Expression Print")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("grep -n pattern files -- 规则 -n表示显示行号\ngrep -n 'PostsActivity' AndroidManifest.xml\ngrep -n '\\d' AndroidManifest.xml\ngrep 'aapt' build-channel.xml -- 文件中包含字符串的所有地方\ngrep -n 'aapt' build-channel.xml -- 文件中包含字符串的所有地方，并显示行号\nps -e | grep java -- 所有java进程\nps -e | grep -i qq --所有qq进程，不区分大小写\n")])])]),e("h2",{attrs:{id:"查看命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看命令"}},[t._v("#")]),t._v(" 查看命令")]),t._v(" "),e("p",[e("strong",[t._v("tail")])]),t._v(" "),e("p",[e("strong",[t._v("tail [-f] [-c Number | -n Number | -m Number | -b Number | -k Number] [File]")])]),t._v(" "),e("p",[e("strong",[t._v("从指定点开始将文件写到标准输出。使用tail命令的-f选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不断刷新，使你看到最新的文件内容。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("tail -f test.log，循环查看文件内容，Ctrl＋c来终止\ntail -n 5 test.log，显示文件最后5行内容\ntail -n  5 test.log，从第5行开始显示文件\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("cat")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("cat nohup.out | grep 123456 搜索关键词  \ncat service.log | wc -l 日志输出了多少行\n")])])]),e("p",[e("strong",[t._v("watch")]),e("br"),t._v(" "),e("strong",[t._v("watch [options] command")])]),t._v(" "),e("p",[e("strong",[t._v("每隔一段时间重复运行一个命令，默认间隔时间是2秒。要运行的命令直接传给shell（注意引用和转义特殊字符）。结果会展示为全屏模式，这样你可以很方便的观察改变")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("watch -n 60 date，执行date命令每分钟一次，输入^C 退出\nwatch -d ls -l，查看目录变化\nwatch -d ’ls -l | fgrep joe’，想找joe用户的文件\nwatch -d 'ls -l|grep scf'，监测当前目录中 scf' 的文件的变化\nwatch -n 10 'cat /proc/loadavg'，10秒一次输出系统的平均负载\nwatch -n 1 -d netstat -ant，每隔一秒高亮显示网络链接数的变化\nwatch -n 1 -d 'pstree | grep http'，每隔一秒高亮显示http链接数的变化\n")])])]),e("h2",{attrs:{id:"文件相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件相关"}},[t._v("#")]),t._v(" 文件相关")]),t._v(" "),e("p",[e("strong",[t._v("vi/vim（带颜色）")]),e("br"),t._v(" "),e("strong",[t._v("vim file")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("按i键，进入编辑模式（我习惯用a键）\n"),e("strong",[t._v("按esc键，进入命令模式")])]),t._v(" "),e("p",[t._v("按G跳转到文件的末尾\n从开头搜索，按/ +关键字搜索对应的记录，按n往下查询，按N往上查询\n从结尾处搜索，按? +关键字搜索对应的记录，按n往上查询，按N往下查询\n搜索后，打开别的文件发现也被高亮了，输入：nohlsearch或者：set nohlsearch，简写成noh和set-noh\n:w   保存文件但不退出\n:wq  保存文件并退出\nq:  不保存文件，退出\n:q! 不保存文件，强制退出")])])]),t._v(" "),e("p",[e("strong",[t._v("vim 中文乱码问题")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('[root@xxx]#locale\n[root@xxx]#yum install kde-l10n-Chinese\n[root@xxx]#vim /etc/locale.conf\nLANG="zh_CN"\n[root@xxx]#reboot\n')])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("chmod")]),e("br"),t._v(" "),e("strong",[t._v("change mode，变更文件或目录的读、写、运行权限")])]),t._v(" "),e("p",[e("strong",[t._v("chmod [-cfvR] [--help] [--version] mode file...")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("mode:权限设定字串，格式如下 : [ugoa...][[ -=][rwxX]...][,...]\nu 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是\n  表示增加权限、- 表示取消权限、= 表示唯一设定权限。\nr 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。\nchmod也可以用数字来表示权限，语法为：chmod abc file，如chmod 777 file\n其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。 r=4，w=2，x=1\nchmod 777 file，等同于 chmod a=rwx file\nchmod ug=rwx,o=x file，等同于 chmod 771 file\nchmod 4755 filename，可使此程序具有root的权限\nls -l 可以查看列出当前用户的文件权限\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("zip")]),e("br"),t._v(" "),e("strong",[t._v("zip -r filename.zip filesdir")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("zip -r test.zip ./*，把当前所有文件压缩到test.zip\nzip -r test.zip test，把test文件所有文件及目录，压缩到test.zip\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("unzip")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("unzip zip-file，解压到当前目录\nunzip -d dst-dir zip-file，解压到指定的目录，-d后为指定目录\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("tar")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("tar -xzvf test.tar.gz  把这个备份文件还原并解压缩\n")])])]),e("h2",{attrs:{id:"内存相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存相关"}},[t._v("#")]),t._v(" 内存相关")]),t._v(" "),e("p",[e("strong",[t._v("ps")]),e("br"),t._v(" "),e("strong",[t._v("显示瞬间行程(process)的动态，ps [options] [--help]")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("ps -A，列出所有的进程\nps -w，显示加宽可以显示较多的资讯\nps -au，显示较详细的资讯\nps -aux，显示所有（包含其他用户）的进程\nps -ef |grep java\nkill -9 processId //杀掉某个进程\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("linux上进程有5种状态:")])]),t._v(" "),e("ul",[e("li",[t._v("运行(正在运行或在运行队列中等待)")]),t._v(" "),e("li",[t._v("中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)")]),t._v(" "),e("li",[t._v("不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)")]),t._v(" "),e("li",[t._v("僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)")]),t._v(" "),e("li",[t._v("停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)")])]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("top")]),e("br"),t._v(" "),e("strong",[t._v("动态观察程序的变化，top [-d] | top [-bnp]")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("top -d 2，每两秒钟更新一次\ntop -d 2 -pid 10604，仅观察PID＝10604的程序\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("free")]),e("br"),t._v(" "),e("strong",[t._v("free [options]")])]),t._v(" "),e("p",[e("strong",[t._v("free命令可以显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer。在Linux系统监控的工具中，free命令是最经常使用的命令之一")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("free -m，以MB为单位显示内存使用情况\nfree -h\n")])])]),e("p",[e("strong",[t._v("释放缓存区内存")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("[root@xxx ~]# echo 1 > /proc/sys/vm/drop_caches\n[root@xxx ~]# echo 2 > /proc/sys/vm/drop_caches\n[root@xxx ~]# echo 3 > /proc/sys/vm/drop_caches\n[root@xxx ~]# sync\n")])])]),e("p",[t._v("上面三种方式都是临时释放缓存的方法，要想永久释放缓存，需要在/etc/sysctl.conf文件中配置：vm.drop_caches=1/2/3，然后sysctl -p生效即可！")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("kill")]),e("br"),t._v(" "),e("strong",[t._v("kill [-s signal_name] pid...")])]),t._v(" "),e("p",[e("strong",[t._v("发送指定的信号到相应进程，The kill utility sends a signal to the processes specified by the pid operand(s)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("kill -9 pid，强行中止进程，强大和危险的命令迫使进程在运行时突然终止，进程在结束后不能自我清理。危害是导致系统资源无法正常释放，一般不推荐使用，除非其他办法都无效。\nkill -HUP PID，停止和重启进程，该命令让Linux和缓的执行进程关闭，然后立即重启。在配置应用程序的时候，这个命令很方便，在对配置文件修改后需要重启进程时就可以执行此命令。\nkill -l PID，以优雅的方式结束进程，-l选项告诉kill命令用好像启动进程的用户已注销的方式结束进程。当使用该选项时，kill命令也试图杀死所留下的子进程。但这个命令也不是总能成功--或许仍然需要先手工杀死子进程，然后再杀死父进程。\n\n\nps -ef | grep java 查找进程pid\n")])])]),e("h2",{attrs:{id:"网络相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络相关"}},[t._v("#")]),t._v(" 网络相关")]),t._v(" "),e("p",[e("strong",[t._v("ping")]),e("br"),t._v(" "),e("strong",[t._v("测试网络和各外部主机的状态")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("ping -c 10 -i 0.5 192.168.1.2，时间间隔和次数限制的ping\nping -c 5 www.baidu.com，通过域名ping公网上的站点\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("netstat")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("netstat -a，列出所有端口\nnetstat -ap | grep ssh，找出程序运行的端口\nnetstat -anpt | grep ':16064'，找出运行在指定端口的进程\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("telnet")]),e("br"),t._v(" "),e("strong",[t._v("登入远端主机(参考ssh)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("telnet 192.168.120.206\nservice xinetd restart  启动telnet服务\n")])])]),e("hr"),t._v(" "),e("p",[e("strong",[t._v("ifconfig")]),e("br"),t._v(" "),e("strong",[t._v("查看和配置网络设备")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("ifconfig -a 显示全部接口信息\n")])])]),e("h2",{attrs:{id:"工具命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工具命令"}},[t._v("#")]),t._v(" 工具命令")]),t._v(" "),e("p",[e("strong",[t._v("maven")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("mvn clean，清除目标目录中的生成结果\n")])])]),e("p",[t._v("mvn package，依据项目生成 jar 文件")])])}),[],!1,null,null,null);s.default=n.exports}}]);