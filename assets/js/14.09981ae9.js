(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{498:function(e,t,n){"use strict";n.r(t);var s=n(4),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"vue2-0配置webpack-dev-server的配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue2-0配置webpack-dev-server的配置"}},[e._v("#")]),e._v(" Vue2.0配置webpack-dev-server的配置")]),e._v(" "),n("p",[e._v("proxy:设置代理")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[e._v("因为浏览器的同源策略，调用不同域的资源就会产生跨域的问题，所以需要设置代理配置跨域，才能正常请求到其他域下的资源\n设置代理, 首先得有一个标识, 确认哪一个连接要用代理. 不然的话, html, css, js这些静态资源都使用代理的网址调用. 所以只有需要调用的接口用代理, 静态文件用本地.")])]),e._v(" "),n("ul",[n("li",[e._v("'/api':{}：接口只要是'api'开头的才用代理.这个'api'即标识")]),e._v(" "),n("li",[e._v("target:源地址，即请求接口的url前缀，如果我的接口都在http://xxx.xx.com下，那么源地址就是http://xxx.xx.com")]),e._v(" "),n("li",[e._v("changeOrigin:是否允许跨域")]),e._v(" "),n("li",[e._v("ws:是否代理websockets")]),e._v(" "),n("li",[e._v("pathRewrite:{'^/api':''}:顾名思义，这是 ' 路径重写 ’ 的意思")]),e._v(" "),n("li",[e._v("当设置了标识符后，接口调用就要这么写 :/api/delete?id=123，最后请求的路径就是 http://xxx.xx.com/api/delete?id=123.但是如果正确的接口路径里面没有/api. 所以就需要 pathRewrite,用'^/api':'', 把'/api'用空字符代替,最后请求的路径就是http://xxx.xx.com/delete?id=123了.这样既能有正确标识, 又能在请求接口的时候去掉api.")])]),e._v(" "),n("h3",{attrs:{id:"vue3-0配置vue-config-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue3-0配置vue-config-js"}},[e._v("#")]),e._v(" Vue3.0配置vue.config.js")]),e._v(" "),n("p",[e._v("``\nmodule.exports = {\n// 基本路径\nbaseUrl: '/',\n// 输出文件目录\noutputDir: 'dist',\n// eslint-loader 是否在保存的时候检查\nlintOnSave: true,\n// webpack配置\nchainWebpack: () => { },\nconfigureWebpack: () => { },\n// 生产环境是否生成 sourceMap 文件\nproductionSourceMap: true,\n// css相关配置\ncss: {\n// 是否使用css分离插件 ExtractTextPlugin\nextract: true,\n// 开启 CSS source maps?\nsourceMap: false,\n// css预设器配置项\nloaderOptions: {},\n// 启用 CSS modules for all css / pre-processor files.\nmodules: false\n},\nparallel: require('os').cpus().length > 1,\npwa: {},\n// webpack-dev-server 相关配置\ndevServer: {\nopen: true,                                 //配置自动启动浏览器\nhost: 'localhost',\nport: 8080,                                 // 端口号\nhttps: false,\nhotOnly: false,                             // https:{type:Boolean}\nproxy: {                                        // 配置跨域\n'/api':{\ntarget:'http://xxx.xx.xxx.xxx:8080', //源地址\nchangeOrigin:true,                  //改变源\nws:true,                            //是否代理websockets\npathRewrite:{\n'^/api':''\n}\n}\n},                                           // 配置跨域处理,只有一个代理\nbefore: app => { }\n},\n// 第三方插件配置\npluginOptions: {}\n}")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code")]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"})])])}),[],!1,null,null,null);t.default=a.exports}}]);