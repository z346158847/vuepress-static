(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{500:function(e,n,_){"use strict";_.r(n);var t=_(4),v=Object(t.a)({},(function(){var e=this,n=e.$createElement,_=e._self._c||n;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("转自"),_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/144933462",target:"_blank",rel:"noopener noreferrer"}},[e._v("老炮说Java"),_("OutboundLink")],1)]),e._v(" "),_("h2",{attrs:{id:"_1-nginx介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx介绍"}},[e._v("#")]),e._v(" 1.Nginx介绍")]),e._v(" "),_("p",[e._v("传统的 Web 服务器，每个客户端连接作为一个单独的进程或线程处理，需在切换任务时将 CPU 切换到新的任务并创建一个新的运行时上下文，消耗额外的内存和 CPU 时间，当并发请求增加时，服务器响应变慢，从而对性能产生负面影响。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/Fi16ipDrxPQxlbdRXY5IuYAp4I98",alt:""}})]),e._v(" "),_("p",[e._v("Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。")]),e._v(" "),_("p",[e._v("Nginx 的最重要的几个使用场景：")]),e._v(" "),_("ul",[_("li",[e._v("静态资源服务，通过本地文件系统提供服务；")]),e._v(" "),_("li",[e._v("反向代理服务，延伸出包括缓存、负载均衡等；")]),e._v(" "),_("li",[e._v("API 服务，OpenResty ；")]),e._v(" "),_("li",[e._v("对于前端来说 Node.js 不陌生了，Nginx 和 Node.js 的很多理念类似，HTTP 服务器、事件驱动、异步非阻塞等，且 Nginx 的大部分功能使用 Node.js 也可以实现，但 Nginx 和 Node.js 并不冲突，都有自己擅长的领域。Nginx 擅长于底层服务器端资源的处理（静态资源处理转发、反向代理，负载均衡等），Node.js 更擅长上层具体业务逻辑的处理，两者可以完美组合，共同助力前端开发。")])]),e._v(" "),_("h2",{attrs:{id:"_2-相关概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-相关概念"}},[e._v("#")]),e._v(" 2.相关概念")]),e._v(" "),_("h3",{attrs:{id:"_2-1简单请求和非简单请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1简单请求和非简单请求"}},[e._v("#")]),e._v(" 2.1简单请求和非简单请求")]),e._v(" "),_("p",[e._v("首先我们来了解一下简单请求和非简单请求，如果同时满足下面两个条件，就属于简单请求：")]),e._v(" "),_("p",[e._v("请求方法是 "),_("code",[e._v("HEAD")]),e._v("、"),_("code",[e._v("GET")]),e._v("、"),_("code",[e._v("POST")]),e._v(" 三种之一；\nHTTP 头信息不超过右边着几个字段："),_("code",[e._v("Accept")]),e._v("、"),_("code",[e._v("Accept-Language")]),e._v("、"),_("code",[e._v("Content-Language")]),e._v("、"),_("code",[e._v("Last-Event-IDContent-Type")]),e._v(" 只限于三个值 "),_("code",[e._v("application/x-www-form-urlencoded")]),e._v("、"),_("code",[e._v("multipart/form-data")]),e._v("、"),_("code",[e._v("text/plain")]),e._v("；\n凡是不同时满足这两个条件的，都属于非简单请求。")]),e._v(" "),_("p",[e._v("浏览器处理简单请求和非简单请求的方式不一样：")]),e._v(" "),_("p",[_("strong",[e._v("简单请求")])]),e._v(" "),_("p",[e._v("对于简单请求，浏览器会在头信息中增加 "),_("code",[e._v("Origin")]),e._v(" 字段后直接发出，"),_("code",[e._v("Origin")]),e._v(" 字段用来说明，本次请求来自的哪个源（协议+域名+端口）。")]),e._v(" "),_("p",[e._v("如果服务器发现 "),_("code",[e._v("Origin")]),e._v(" 指定的源不在许可范围内，服务器会返回一个正常的 HTTP 回应，浏览器取到回应之后发现回应的头信息中没有包含 "),_("code",[e._v("Access-Control-Allow-Origin")]),e._v("字段，就抛出一个错误给 XHR 的 "),_("code",[e._v("error")]),e._v(" 事件；")]),e._v(" "),_("p",[e._v("如果服务器发现 "),_("code",[e._v("Origin")]),e._v(" 指定的域名在许可范围内，服务器返回的响应会多出几个 "),_("code",[e._v("Access-Control-")]),e._v(" 开头的头信息字段。")]),e._v(" "),_("p",[_("strong",[e._v("非简单请求")])]),e._v(" "),_("p",[e._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 "),_("code",[e._v("PUT")]),e._v(" 或 "),_("code",[e._v("DELETE")]),e._v("，或 "),_("code",[e._v("Content-Type")]),e._v(" 值为 "),_("code",[e._v("application/json")]),e._v("。浏览器会在正式通信之前，发送一次 HTTP 预检 "),_("code",[e._v("OPTIONS")]),e._v(" 请求，先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 请求方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XHR 请求，否则报错。")]),e._v(" "),_("h3",{attrs:{id:"_2-2-跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-跨域"}},[e._v("#")]),e._v(" 2.2 跨域")]),e._v(" "),_("p",[e._v("在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是跨域请求。")]),e._v(" "),_("p",[e._v("跨域是浏览器的同源策略决定的，是一个重要的浏览器安全策略，用于限制一个 origin 的文档或者它加载的脚本与另一个源的资源进行交互，它能够帮助阻隔恶意文档，减少可能被攻击的媒介，可以使用 CORS 配置解除这个限制。")]),e._v(" "),_("p",[e._v("关于跨域网上已经有很多解释，这里就不啰嗦，也可以直接看 MDN 的 <浏览器的同源策略> 文档进一步了解，这里就列举几个同源和不同元的例子，相信程序员都能看得懂。")]),e._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("# 同源的例子\nhttp://example.com/app1/index.html  # 只是路径不同\nhttp://example.com/app2/index.html\n\nhttp://Example.com:80  # 只是大小写差异\nhttp://example.com\n\n# 不同源的例子\nhttp://example.com/app1   # 协议不同\nhttps://example.com/app2\n\nhttp://example.com        # host 不同\nhttp://www.example.com\nhttp://myapp.example.com\n\nhttp://example.com        # 端口不同\nhttp://example.com:8080\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br"),_("span",{staticClass:"line-number"},[e._v("11")]),_("br"),_("span",{staticClass:"line-number"},[e._v("12")]),_("br"),_("span",{staticClass:"line-number"},[e._v("13")]),_("br"),_("span",{staticClass:"line-number"},[e._v("14")]),_("br"),_("span",{staticClass:"line-number"},[e._v("15")]),_("br"),_("span",{staticClass:"line-number"},[e._v("16")]),_("br"),_("span",{staticClass:"line-number"},[e._v("17")]),_("br")])]),_("h3",{attrs:{id:"_2-3-正向代理和反向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-正向代理和反向代理"}},[e._v("#")]),e._v(" 2.3 正向代理和反向代理")]),e._v(" "),_("p",[_("strong",[e._v("反向代理")]),e._v("（Reverse Proxy）对应的是正向代理（Forward Proxy），他们的区别：")]),e._v(" "),_("p",[_("strong",[e._v("正向代理：")]),e._v(" 一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见；")]),e._v(" "),_("p",[e._v("举个具体的例子 ，你的浏览器无法直接访问谷哥，这时候可以通过一个代理服务器来帮助你访问谷哥，那么这个服务器就叫正向代理。")]),e._v(" "),_("p",[_("strong",[e._v("反向代理：")]),e._v(" 与一般访问流程相比，使用反向代理后，直接收到请求的服务器是代理服务器，然后将请求转发给内部网络上真正进行处理的服务器，得到的结果返回给客户端。反向代理隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。现在基本上所有的大型网站都设置了反向代理。")]),e._v(" "),_("p",[e._v("举个具体的例子 ，去饭店吃饭，可以点川菜、粤菜、江浙菜，饭店也分别有三个菜系的厨师 ‍ ，但是你作为顾客不用管哪个厨师给你做的菜，只用点菜即可，小二将你菜单中的菜分配给不同的厨师来具体处理，那么这个小二就是反向代理服务器。")]),e._v(" "),_("p",[e._v("简单的说，一般给客户端做代理的都是正向代理，给服务器做代理的就是反向代理。")]),e._v(" "),_("p",[e._v("正向代理和反向代理主要的原理区别可以参见下图：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/FoqvJMLLYO32_X9qfZtoTRtGuGek",alt:""}})]),e._v(" "),_("h3",{attrs:{id:"_2-4-负载均衡"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-负载均衡"}},[e._v("#")]),e._v(" 2.4 负载均衡")]),e._v(" "),_("p",[e._v("一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。")]),e._v(" "),_("p",[e._v("这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。")]),e._v(" "),_("p",[e._v("很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是"),_("strong",[e._v("负载均衡")]),e._v("。")]),e._v(" "),_("p",[e._v("请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是负载均衡，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。")]),e._v(" "),_("p",[e._v("举个具体的例子 ，晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员大喇叭“请走 B 口，B 口人少车空....”，这个工作人员的作用就是负载均衡。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/FoprbM-gCFe0XCna94FbPh4qR2AK",alt:""}})]),e._v(" "),_("h3",{attrs:{id:"_2-5-动静分离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-动静分离"}},[e._v("#")]),e._v(" 2.5 动静分离")]),e._v(" "),_("p",[e._v("为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/FsfQpyyCetUusIpbsWAbIb0xhxQ_",alt:""}})]),e._v(" "),_("p",[e._v("一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。")]),e._v(" "),_("p",[e._v("使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。")]),e._v(" "),_("h2",{attrs:{id:"_3-nginx-快速安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-nginx-快速安装"}},[e._v("#")]),e._v(" 3. Nginx 快速安装")]),e._v(" "),_("h3",{attrs:{id:"_3-1-安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-安装"}},[e._v("#")]),e._v(" 3.1 安装")]),e._v(" "),_("p",[e._v("Nginx不在默认的yum源中，使用官网的yum源")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("[root@xxx]#rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n[root@xxx]#yum repolist\n[root@xxx]#yum -y install nginx\n")])])]),_("p",[e._v("主要关注的文件夹有两个：")]),e._v(" "),_("ol",[_("li",[e._v("/etc/nginx/conf.d/ 文件夹，是我们进行子配置的配置项存放处，/etc/nginx/nginx.conf 主配置文件会默认把这个文件夹中所有子配置项都引入；")]),e._v(" "),_("li",[e._v("/usr/share/nginx/html/ 文件夹，通常静态文件都放在这个文件夹，也可以根据你自己的习惯放其他地方；")])]),e._v(" "),_("h3",{attrs:{id:"_3-3-配置防火墙"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-配置防火墙"}},[e._v("#")]),e._v(" 3.3 配置防火墙")]),e._v(" "),_("p",[e._v("防火墙设置")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("#开放80端口\n[root@xxx]#firewall-cmd --permanent --zone=public --add-port=80/tcp\n[root@xxx]#firewall-cmd --permanent --zone=public --add-port=80/udp\n#将http服务加入防火墙\n[root@xxx]#firewall-cmd --zone=public --permanent --add-service=http\n")])])]),_("h2",{attrs:{id:"_4-nginx-操作常用命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-nginx-操作常用命令"}},[e._v("#")]),e._v(" 4. Nginx 操作常用命令")]),e._v(" "),_("p",[e._v("Nginx 的命令在控制台中输入 "),_("code",[e._v("nginx -h")]),e._v(" 就可以看到完整的命令，这里列举几个常用的命令：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启\nnginx -s reopen\t # 重启 Nginx\nnginx -s stop    # 快速关闭\nnginx -s quit    # 等待工作进程处理完成后关闭\nnginx -T         # 查看当前 Nginx 最终的配置\nnginx -t -c <配置路径>    # 检查配置是否有问题，如果已经在配置目录，则不需要-c\n")])])]),_("p",[_("code",[e._v("systemctl")]),e._v(" 是 Linux 系统应用管理工具 "),_("code",[e._v("systemd")]),e._v(" 的主命令，用于管理系统，我们也可以用它来对 Nginx 进行管理，相关命令如下：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("systemctl start nginx    # 启动 Nginx\nsystemctl stop nginx     # 停止 Nginx\nsystemctl restart nginx  # 重启 Nginx\nsystemctl reload nginx   # 重新加载 Nginx，用于修改配置后\nsystemctl enable nginx   # 设置开机启动 Nginx\nsystemctl disable nginx  # 关闭开机启动 Nginx\nsystemctl status nginx   # 查看 Nginx 运行状态\n")])])]),_("p",[e._v("然后访问你的 IP，这时候就可以看到 Nginx 的欢迎页面了～ "),_("code",[e._v("Welcome to nginx！")])]),e._v(" "),_("h2",{attrs:{id:"_5-nginx-配置语法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-nginx-配置语法"}},[e._v("#")]),e._v(" 5. Nginx 配置语法")]),e._v(" "),_("p",[e._v("网站文件存放默认目录")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("/usr/share/nginx/html\n")])])]),_("p",[e._v("网站默认站点配置")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("/etc/nginx/conf.d/default.conf\n")])])]),_("p",[e._v("Nginx全局配置")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("/etc/nginx/nginx.conf\n")])])]),_("p",[e._v("中文乱码")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("vim /etc/nginx/conf.d/default.conf\nserver {\n  listen      80;\n  server_name  you.domainName.com;\n  charset utf-8;  // 编码改为utf-8就好了\n")])])]),_("h2",{attrs:{id:"_5-1-典型配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-典型配置"}},[e._v("#")]),e._v(" 5.1 典型配置")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v('Nginx 的典型配置：\n\nuser  nginx;                        # 运行用户，默认即是nginx，可以不进行设置\nworker_processes  1;                # Nginx 进程数，一般设置为和 CPU 核数一样\nerror_log  /var/log/nginx/error.log warn;   # Nginx 的错误日志存放目录\npid        /var/run/nginx.pid;      # Nginx 服务启动时的 pid 存放位置\n\nevents {\n    use epoll;     # 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)\n    worker_connections 1024;   # 每个进程允许最大并发数\n}\n\nhttp {   # 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置\n    # 设置日志模式\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\naccess_log  /var/log/nginx/access.log  main;   # Nginx访问日志存放位置\n\nsendfile            on;   # 开启高效传输模式\ntcp_nopush          on;   # 减少网络报文段的数量\ntcp_nodelay         on;\nkeepalive_timeout   65;   # 保持连接的时间，也叫超时时间，单位秒\ntypes_hash_max_size 2048;\n\ninclude             /etc/nginx/mime.types;      # 文件扩展名与类型映射表\ndefault_type        application/octet-stream;   # 默认文件类型\n\ninclude /etc/nginx/conf.d/*.conf;   # 加载子配置项\n\nserver {\n\tlisten       80;       # 配置监听的端口\n\tserver_name  localhost;    # 配置的域名\n\t\n\tlocation / {\n\t\troot   /usr/share/nginx/html;  # 网站根目录\n\t\tindex  index.html index.htm;   # 默认首页文件\n\t\tdeny 172.168.22.11;   # 禁止访问的ip地址，可以为all\n\t\tallow 172.168.33.44；# 允许访问的ip地址，可以为all\n\t}\n\t\n\terror_page 500 502 503 504 /50x.html;  # 默认50x对应的访问页面\n\terror_page 400 404 error.html;   # 同上\n}\n}\n')])])]),_("p",[e._v("server 块可以包含多个 location 块，location 指令用于匹配 uri，语法：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("location [ = | ~ | ~* | ^~] uri {\n    ...\n}\n")])])]),_("p",[e._v("指令后面：")]),e._v(" "),_("ol",[_("li",[_("code",[e._v("=")]),e._v(" 精确匹配路径，用于不含正则表达式的 "),_("code",[e._v("uri")]),e._v(" 前，如果匹配成功，不再进行后续的查找；")]),e._v(" "),_("li",[_("code",[e._v("^~")]),e._v(" 用于不含正则表达式的 "),_("code",[e._v("uri")]),e._v(" 前，表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找；")]),e._v(" "),_("li",[_("code",[e._v("~")]),e._v(" 表示用该符号后面的正则去匹配路径，区分大小写；")]),e._v(" "),_("li",[_("code",[e._v("~*")]),e._v(" 表示用该符号后面的正则去匹配路径，不区分大小写。跟 "),_("code",[e._v("~")]),e._v(" 优先级都比较低，如有多个location的正则能匹配的话，则使用正则表达式最长的那个；")]),e._v(" "),_("li",[e._v("如果 uri 包含正则表达式，则必须要有 "),_("code",[e._v("~")]),e._v(" 或 "),_("code",[e._v("~*")]),e._v(" 标志。")])]),e._v(" "),_("h3",{attrs:{id:"_5-2-全局变量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-全局变量"}},[e._v("#")]),e._v(" 5.2 全局变量")]),e._v(" "),_("p",[_("code",[e._v("Nginx")]),e._v(" 有一些常用的全局变量，你可以在配置的任何位置使用它们，如下表：")]),e._v(" "),_("p",[e._v("全局变量名功能"),_("code",[e._v("$host")]),e._v("请求信息中的"),_("code",[e._v("Host")]),e._v("，如果请求中没有"),_("code",[e._v("Host")]),e._v("行，则等于设置的服务器名，不包含端口"),_("code",[e._v("$request_method")]),e._v("客户端请求类型，"),_("code",[e._v("如GET")]),e._v("、"),_("code",[e._v("POST$remote_addr")]),e._v("客户端的IP地址"),_("code",[e._v("$args")]),e._v("请求中的参数"),_("code",[e._v("$arg_PARAMETERGET")]),e._v("请求中变量名 "),_("code",[e._v("PARAMETER")]),e._v(" 参数的值，例如："),_("code",[e._v("$http_user_agent(Uaer-Agent 值)")]),e._v(","),_("code",[e._v("$http_referer...$content_length")]),e._v("请求头中的"),_("code",[e._v("Content-length")]),e._v("字段"),_("code",[e._v("$http_user_agent")]),e._v("客户端"),_("code",[e._v("agent")]),e._v("信息"),_("code",[e._v("$http_cookie")]),e._v("客户端"),_("code",[e._v("cookie")]),e._v("信息"),_("code",[e._v("$remote_addr")]),e._v("客户端的IP地址"),_("code",[e._v("$remote_port")]),e._v("客户端的端口"),_("code",[e._v("$http_user_agent")]),e._v("客户端agent信息"),_("code",[e._v("$server_protocol")]),e._v("请求使用的协议，如"),_("code",[e._v("HTTP/1.0")]),e._v("、"),_("code",[e._v("HTTP/1.1$server_addr")]),e._v("服务器地址"),_("code",[e._v("$server_name")]),e._v("服务器名称"),_("code",[e._v("$server_port")]),e._v("服务器的端口号"),_("code",[e._v("$schemeHTTP")]),e._v(" 方法（如http，https）")]),e._v(" "),_("p",[e._v("还有更多的内置预定义变量，可以直接搜索关键字「nginx内置预定义变量」可以看到一堆博客写这个，这些变量都可以在配置文件中直接使用。")]),e._v(" "),_("h2",{attrs:{id:"_6-设置二级域名虚拟主机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-设置二级域名虚拟主机"}},[e._v("#")]),e._v(" 6. 设置二级域名虚拟主机")]),e._v(" "),_("p",[e._v("在某某云 ☁️ 上购买了域名之后，就可以配置虚拟主机了，一般配置的路径在 "),_("code",[e._v("域名管理 -> 解析 -> 添加记录")]),e._v(" 中添加二级域名，配置后某某云会把二级域名也解析到我们配置的服务器 IP 上，然后我们在 Nginx 上配置一下虚拟主机的访问监听，就可以拿到从这个二级域名过来的请求了。")]),e._v(" "),_("p",[e._v("现在我自己的服务器上配置了一个 "),_("code",[e._v("vue")]),e._v(" 的二级域名，也就是说在外网访问 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 的时候，也可以访问到我们的服务器了。")]),e._v(" "),_("p",[e._v("由于默认配置文件 "),_("code",[e._v("/etc/nginx/nginx.conf")]),e._v(" 的 http 模块中有一句 "),_("code",[e._v("include /etc/nginx/conf.d/*.conf")]),e._v(" 也就是说 conf.d 文件夹下的所有 *.conf 文件都会作为子配置项被引入配置文件中。为了维护方便，我在 "),_("code",[e._v("/etc/nginx/conf.d")]),e._v(" 文件夹中新建一个 "),_("code",[e._v("fe.sherlocked93.club.conf")]),e._v("：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# /etc/nginx/conf.d/fe.sherlocked93.club.conf\n\nserver {\n  listen 80;\n    server_name fe.sherlocked93.club;\n\n    location / {\n        root  /usr/share/nginx/html/fe;\n        index index.html;\n    }\n}\n")])])]),_("p",[e._v("然后在 "),_("code",[e._v("/usr/share/nginx/html")]),e._v(" 文件夹下新建 "),_("code",[e._v("vue")]),e._v(" 文件夹，新建文件 "),_("code",[e._v("index.html")]),e._v("，内容随便写点，改完 "),_("code",[e._v("nginx -s reload")]),e._v(" 重新加载，浏览器中输入 "),_("code",[e._v("fe.sherlocked93.club")]),e._v("，发现从二级域名就可以访问到我们刚刚新建的 "),_("code",[e._v("vue")]),e._v(" 文件夹：")]),e._v(" "),_("h2",{attrs:{id:"_7-配置反向代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-配置反向代理"}},[e._v("#")]),e._v(" 7. 配置反向代理")]),e._v(" "),_("p",[e._v("反向代理是工作中最常用的服务器功能，经常被用来解决跨域问题，下面简单介绍一下如何实现反向代理。")]),e._v(" "),_("p",[e._v("首先进入 "),_("code",[e._v("Nginx")]),e._v(" 的主配置文件：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("vim /etc/nginx/nginx.conf\n")])])]),_("p",[e._v("为了看起来方便，把行号显示出来 "),_("code",[e._v(":set nu")]),e._v(" （个人习惯），然后我们去 "),_("code",[e._v("http")]),e._v(" 模块的 "),_("code",[e._v("server")]),e._v(" 块中的 "),_("code",[e._v("location /")]),e._v("，增加一行将默认网址重定向到最大学习网站 "),_("code",[e._v("Bilibili")]),e._v(" 的 "),_("code",[e._v("proxy_pass")]),e._v(" 配置 ：\n"),_("img",{attrs:{src:"http://img.zwjblog.top/FvuWeSUQ4x6xnNcTMpsbHiWajMhR",alt:""}})]),e._v(" "),_("p",[e._v("改完保存退出，"),_("code",[e._v("nginx -s reload")]),e._v(" 重新加载，进入默认网址，那么现在就直接跳转到 B 站了，实现了一个简单的代理。")]),e._v(" "),_("p",[e._v("实际使用中，可以将请求转发到本机另一个服务器上，也可以根据访问的路径跳转到不同端口的服务中。")]),e._v(" "),_("p",[e._v("比如我们监听 9001 端口，然后把访问不同路径的请求进行反向代理：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("把访问 "),_("code",[e._v("http://127.0.0.1:9001/edu")]),e._v(" 的请求转发到 "),_("code",[e._v("http://127.0.0.1:8080")])])]),e._v(" "),_("li",[_("p",[e._v("把访问 "),_("code",[e._v("http://127.0.0.1:9001/vod")]),e._v(" 的请求转发到 "),_("code",[e._v("http://127.0.0.1:8081")]),e._v("\n这种要怎么配置呢，首先同样打开主配置文件，然后在 http 模块下增加一个 server 块：")]),e._v(" "),_("p",[e._v("server {\nlisten 9001;\nserver_name *.sherlocked93.club;")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("location ~ /edu/ {\n  proxy_pass http://127.0.0.1:8080;\n}\n\nlocation ~ /vod/ {\n  proxy_pass http://127.0.0.1:8081;\n}\n")])])]),_("p",[e._v("}")])])]),e._v(" "),_("p",[e._v("反向代理还有一些其他的指令，可以了解一下：")]),e._v(" "),_("ol",[_("li",[_("code",[e._v("proxy_set_header：")]),e._v("在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息；")]),e._v(" "),_("li",[_("code",[e._v("proxy_connect_timeout：")]),e._v("配置 "),_("code",[e._v("Nginx")]),e._v(" 与后端代理服务器尝试建立连接的超时时间；")]),e._v(" "),_("li",[_("code",[e._v("proxy_read_timeout：")]),e._v("配置 "),_("code",[e._v("Nginx")]),e._v(" 向后端服务器组发出 "),_("code",[e._v("read")]),e._v(" 请求后，等待相应的超时时间；")]),e._v(" "),_("li",[_("code",[e._v("proxy_send_timeout：")]),e._v("配置 "),_("code",[e._v("Nginx")]),e._v(" 向后端服务器组发出 "),_("code",[e._v("write")]),e._v(" 请求后，等待相应的超时时间；")]),e._v(" "),_("li",[_("code",[e._v("proxy_redirect：")]),e._v("用于修改后端服务器返回的响应头中的 "),_("code",[e._v("Location")]),e._v(" 和 "),_("code",[e._v("Refresh")]),e._v("。")])]),e._v(" "),_("h2",{attrs:{id:"_8-跨域-cors-配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-跨域-cors-配置"}},[e._v("#")]),e._v(" 8. 跨域 CORS 配置")]),e._v(" "),_("p",[e._v("关于简单请求、非简单请求、跨域的概念，前面已经介绍过了，还不了解的可以看看前面的讲解。现在前后端分离的项目一统天下，经常本地起了前端服务，需要访问不同的后端地址，不可避免遇到跨域问题。\n"),_("img",{attrs:{src:"http://img.zwjblog.top/FjGdRdPP2qjnhYFi2dT-uOaxt_50",alt:""}})]),e._v(" "),_("p",[e._v("要解决跨域问题，我们来制造一个跨域问题。首先和前面设置二级域名的方式一样，先设置好 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 和 "),_("code",[e._v("be.sherlocked93.club")]),e._v(" 二级域名，都指向本云服务器地址，虽然对应 IP 是一样的，但是在 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 域名发出的请求访问 "),_("code",[e._v("be.sherlocked93.club")]),e._v(" 域名的请求还是跨域了，因为访问的 host 不一致（如果不知道啥原因参见前面跨域的内容）。")]),e._v(" "),_("h3",{attrs:{id:"_8-1-使用反向代理解决跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-使用反向代理解决跨域"}},[e._v("#")]),e._v(" 8.1 使用反向代理解决跨域")]),e._v(" "),_("p",[e._v("在前端服务地址为 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 的页面请求 "),_("code",[e._v("be.sherlocked93.club")]),e._v(" 的后端服务导致的跨域，可以这样配置：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("server {\n  listen 9001;\n  server_name fe.sherlocked93.club;\n\n  location / {\n    proxy_pass be.sherlocked93.club;\n  }\n}\n")])])]),_("p",[e._v("这样就将对前一个域名 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 的请求全都代理到了 "),_("code",[e._v("be.sherlocked93.club")]),e._v("，前端的请求都被我们用服务器代理到了后端地址下，绕过了跨域。")]),e._v(" "),_("p",[e._v("这里对静态文件的请求和后端服务的请求都以 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 开始，不易区分，所以为了实现对后端服务请求的统一转发，通常我们会约定对后端服务的请求加上 "),_("code",[e._v("/apis/")]),e._v(" 前缀或者其他的 "),_("code",[e._v("path")]),e._v(" 来和对静态资源的请求加以区分，此时我们可以这样配置：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# 请求跨域，约定代理后端服务请求path以/apis/开头\nlocation ^~/apis/ {\n    # 这里重写了请求，将正则匹配中的第一个分组的path拼接到真正的请求后面，并用break停止后续匹配\n    rewrite ^/apis/(.*)$ /$1 break;\n    proxy_pass be.sherlocked93.club;\n  \n    # 两个域名之间cookie的传递与回写\n    proxy_cookie_domain be.sherlocked93.club fe.sherlocked93.club;\n}\n")])])]),_("p",[e._v("这样，静态资源我们使用 "),_("code",[e._v("fe.sherlocked93.club/xx.html")]),e._v("，动态资源我们使用 "),_("code",[e._v("fe.sherlocked93.club/apis/getAwo")]),e._v("，浏览器页面看起来仍然访问的前端服务器，绕过了浏览器的同源策略，毕竟我们看起来并没有跨域。")]),e._v(" "),_("p",[e._v("也可以统一一点，直接把前后端服务器地址直接都转发到另一个 "),_("code",[e._v("server.sherlocked93.club")]),e._v("，只通过在后面添加的 "),_("code",[e._v("path")]),e._v(" 来区分请求的是静态资源还是后端服务，看需求了。")]),e._v(" "),_("h3",{attrs:{id:"_8-2-配置-header-解决跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-配置-header-解决跨域"}},[e._v("#")]),e._v(" 8.2 配置 header 解决跨域")]),e._v(" "),_("p",[e._v("当浏览器在访问跨源的服务器时，也可以在跨域的服务器上直接设置 "),_("code",[e._v("Nginx，")]),e._v("从而前端就可以无感地开发，不用把实际上访问后端的地址改成前端服务的地址，这样可适性更高。")]),e._v(" "),_("p",[e._v("比如前端站点是 "),_("code",[e._v("fe.sherlocked93.club")]),e._v("，这个地址下的前端页面请求 "),_("code",[e._v("be.sherlocked93.club")]),e._v(" 下的资源，比如前者的 "),_("code",[e._v("fe.sherlocked93.club/index.html")]),e._v(" 内容是这样的：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v('<html>\n<body>\n    <h1>welcome fe.sherlocked93.club!!<h1>\n    <script type=\'text/javascript\'>\n    var xmlhttp = new XMLHttpRequest()\n    xmlhttp.open("GET", "http://be.sherlocked93.club/index.html", true);\n    xmlhttp.send();\n    <\/script>\n</body>\n</html>\n')])])]),_("p",[e._v("打开浏览器访问 "),_("code",[e._v("fe.sherlocked93.club/index.html")]),e._v(" 的结果如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/FrcXdCGoV8m-lPwBXcxbIfjkv4cb",alt:""}}),e._v("\n很明显这里是跨域请求，在浏览器中直接访问 "),_("code",[e._v("http://be.sherlocked93.club/index.html")]),e._v(" 是可以访问到的，但是在 "),_("code",[e._v("fe.sherlocked93.club")]),e._v(" 的 "),_("code",[e._v("html")]),e._v(" 页面访问就会出现跨域。")]),e._v(" "),_("p",[e._v("在 "),_("code",[e._v("/etc/nginx/conf.d/")]),e._v(" 文件夹中新建一个配置文件，对应二级域名 "),_("code",[e._v("be.sherlocked93.club")]),e._v(" ：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# /etc/nginx/conf.d/be.sherlocked93.club.conf\n\nserver {\n  listen       80;\n  server_name  be.sherlocked93.club;\n  \n    add_header 'Access-Control-Allow-Origin' $http_origin;   # 全局变量获得当前请求origin，带cookie的请求不支持*\n    add_header 'Access-Control-Allow-Credentials' 'true';    # 为 true 可带上 cookie\n    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';  # 允许请求方法\n    add_header 'Access-Control-Allow-Headers' $http_access_control_request_headers;  # 允许请求的 header，可以为 *\n    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n    \n  if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Max-Age' 1728000;   # OPTIONS 请求的有效期，在有效期内不用发出另一条预检请求\n        add_header 'Content-Type' 'text/plain; charset=utf-8';\n        add_header 'Content-Length' 0;\n    \n        return 204;                  # 200 也可以\n    }\n  \n    location / {\n        root  /usr/share/nginx/html/be;\n        index index.html;\n    }\n}\n")])])]),_("p",[e._v("然后 "),_("code",[e._v("nginx -s reload")]),e._v(" 重新加载配置。这时再访问 "),_("code",[e._v("fe.sherlocked93.club/index.html")]),e._v(" 结果如下，请求中出现了我们刚刚配置的 "),_("code",[e._v("Header")]),e._v("：\n"),_("img",{attrs:{src:"http://img.zwjblog.top/FnehF9QDOoueVbt1oPaDmI7EnhId",alt:""}})]),e._v(" "),_("p",[e._v("解决了跨域问题。")]),e._v(" "),_("h2",{attrs:{id:"_9-开启-gzip-压缩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-开启-gzip-压缩"}},[e._v("#")]),e._v(" 9. 开启 gzip 压缩")]),e._v(" "),_("p",[_("code",[e._v("gzip")]),e._v(" 是一种常用的网页压缩技术，传输的网页经过 "),_("code",[e._v("gzip")]),e._v(" 压缩之后大小通常可以变为原来的一半甚至更小（官网原话），更小的网页体积也就意味着带宽的节约和传输速度的提升，特别是对于访问量巨大大型网站来说，每一个静态资源体积的减小，都会带来可观的流量与带宽的节省。")]),e._v(" "),_("p",[e._v("百度可以找到很多检测站点来查看目标网页有没有开启 "),_("code",[e._v("gzip")]),e._v(" 压缩，在下随便找了一个 <网页GZIP压缩检测> 输入掘金 "),_("code",[e._v("juejin.im")]),e._v(" 来偷窥下掘金有没有开启 "),_("code",[e._v("gzip")]),e._v("。\n"),_("img",{attrs:{src:"http://img.zwjblog.top/FlylBM17RB6XVyOwkYvnyim9L5vH",alt:""}})]),e._v(" "),_("p",[e._v("这里可以看到掘金是开启了 "),_("code",[e._v("gzip")]),e._v(" 的，压缩效果还挺不错，达到了 "),_("code",[e._v("52%")]),e._v(" 之多，本来 "),_("code",[e._v("34kb")]),e._v(" 的网页体积，压缩完只需要 "),_("code",[e._v("16kb")]),e._v("，可以想象网页传输速度提升了不少。")]),e._v(" "),_("h3",{attrs:{id:"_9-1-nginx-配置-gzip"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-nginx-配置-gzip"}},[e._v("#")]),e._v(" 9.1 Nginx 配置 gzip")]),e._v(" "),_("p",[e._v("使用 "),_("code",[e._v("gzip")]),e._v(" 不仅需要 "),_("code",[e._v("Nginx")]),e._v(" 配置，浏览器端也需要配合，需要在请求消息头中包含 "),_("code",[e._v("Accept-Encoding: gzip")]),e._v("（IE5 之后所有的浏览器都支持了，是现代浏览器的默认设置）。一般在请求 "),_("code",[e._v("html")]),e._v(" 和 "),_("code",[e._v("css")]),e._v(" 等静态资源的时候，支持的浏览器在 "),_("code",[e._v("request")]),e._v(" 请求静态资源的时候，会加上 "),_("code",[e._v("Accept-Encoding: gzip")]),e._v(" 这个 "),_("code",[e._v("header")]),e._v("，表示自己支持 "),_("code",[e._v("gzip")]),e._v(" 的压缩方式，"),_("code",[e._v("Nginx")]),e._v(" 在拿到这个请求的时候，如果有相应配置，就会返回经过 "),_("code",[e._v("gzip")]),e._v(" 压缩过的文件给浏览器，并在 "),_("code",[e._v("response")]),e._v(" 相应的时候加上 "),_("code",[e._v("content-encoding: gzip")]),e._v(" 来告诉浏览器自己采用的压缩方式（因为浏览器在传给服务器的时候一般还告诉服务器自己支持好几种压缩方式），浏览器拿到压缩的文件后，根据自己的解压方式进行解析。")]),e._v(" "),_("p",[e._v("先来看看 "),_("code",[e._v("Nginx")]),e._v(" 怎么进行 "),_("code",[e._v("gzip")]),e._v(" 配置，和之前的配置一样，为了方便管理，还是在 "),_("code",[e._v("/etc/nginx/conf.d/")]),e._v(" 文件夹中新建配置文件 "),_("code",[e._v("gzip.conf")]),e._v(" ：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# /etc/nginx/conf.d/gzip.conf\n\ngzip on; # 默认off，是否开启gzip\ngzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n# 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下\ngzip_static on;\ngzip_proxied any;\ngzip_vary on;\ngzip_comp_level 6;\ngzip_buffers 16 8k;\n# gzip_min_length 1k;\ngzip_http_version 1.1;\n")])])]),_("p",[e._v("稍微解释一下：")]),e._v(" "),_("ol",[_("li",[e._v("gzip_types：要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用；")]),e._v(" "),_("li",[e._v("gzip_static：默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容；")]),e._v(" "),_("li",[e._v("gzip_proxied：默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩；")]),e._v(" "),_("li",[e._v("gzip_vary：用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩；")]),e._v(" "),_("li",[e._v("gzip_comp_level：gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6；")]),e._v(" "),_("li",[e._v("gzip_buffers：获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得；")]),e._v(" "),_("li",[e._v("gzip_min_length：允许压缩的页面最小字节数，页面字节数从header头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；")]),e._v(" "),_("li",[e._v("gzip_http_version：默认 1.1，启用 gzip 所需的 HTTP 最低版本；\n这个配置可以插入到 http 模块整个服务器的配置里，也可以插入到需要使用的虚拟主机的 "),_("code",[e._v("server")]),e._v(" 或者下面的 "),_("code",[e._v("location")]),e._v(" 模块中，当然像上面我们这样写的话就是被 include 到 http 模块中了。")])]),e._v(" "),_("p",[e._v("其他更全的配置信息可以查看 <官网文档ngx_http_gzip_module>，配置前是这样的：\n"),_("img",{attrs:{src:"http://img.zwjblog.top/Flx6Ro_XIa8w0_SQ4BDEStUMvajE",alt:""}})]),e._v(" "),_("p",[e._v("配置之后 "),_("code",[e._v("response")]),e._v(" 的 "),_("code",[e._v("header")]),e._v(" 里面多了一个 "),_("code",[e._v("Content-Encoding: gzip")]),e._v("，返回信息被压缩了：\n"),_("img",{attrs:{src:"http://img.zwjblog.top/FkjoiylMoaXS13uNYhARU2pTXeri",alt:""}})]),e._v(" "),_("p",[e._v("注意了，一般 "),_("code",[e._v("gzip")]),e._v(" 的配置建议加上 "),_("code",[e._v("gzip_min_length 1k")]),e._v("，不加的话：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/FpQzt6k7GSCaUYnXRtNEedNGWGPv",alt:""}}),e._v("\n由于文件太小，"),_("code",[e._v("gzip")]),e._v(" 压缩之后得到了 "),_("code",[e._v("-48%")]),e._v("的体积优化，压缩之后体积还比压缩之前体积大了，所以最好设置低于 "),_("code",[e._v("1kb")]),e._v(" 的文件就不要 "),_("code",[e._v("gzip")]),e._v(" 压缩了")]),e._v(" "),_("h3",{attrs:{id:"_9-2-webpack-的-gzip-配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-webpack-的-gzip-配置"}},[e._v("#")]),e._v(" 9.2 Webpack 的 gzip 配置")]),e._v(" "),_("p",[e._v("当前端项目使用 Webpack 进行打包的时候，也可以开启 gzip 压缩：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("// vue-cli3 的 vue.config.js 文件\nconst CompressionWebpackPlugin = require('compression-webpack-plugin')\n\nmodule.exports = {\n  // gzip 配置\n  configureWebpack: config => {\n    if (process.env.NODE_ENV === 'production') {\n      // 生产环境\n      return {\n        plugins: [new CompressionWebpackPlugin({\n          test: /\\.js$|\\.html$|\\.css/,    // 匹配文件名\n          threshold: 10240,               // 文件压缩阈值，对超过10k的进行压缩\n          deleteOriginalAssets: false     // 是否删除源文件\n        })]\n      }\n    }\n  },\n  ...\n}\n")])])]),_("p",[e._v("由此打包出来的文件如下图：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://img.zwjblog.top/FmZV9Q1o3W1FXBY16eg9Fd5-FZSM",alt:""}}),e._v("\n这里可以看到某些打包之后的文件下面有一个对应的 .gz 经过 gzip 压缩之后的文件，这是因为这个文件超过了 "),_("code",[e._v("10kb")]),e._v("，有的文件没有超过 "),_("code",[e._v("10kb")]),e._v(" 就没有进行 "),_("code",[e._v("gzip")]),e._v(" 打包，如果你期望压缩文件的体积阈值小一点，可以在 "),_("code",[e._v("compression-webpack-plugin")]),e._v(" 这个插件的配置里进行对应配置。")]),e._v(" "),_("p",[e._v("那么为啥这里 "),_("code",[e._v("Nginx")]),e._v(" 已经有了 "),_("code",[e._v("gzip")]),e._v(" 压缩，"),_("code",[e._v("Webpack")]),e._v(" 这里又整了个 "),_("code",[e._v("gzip")]),e._v(" 呢，因为如果全都是使用 "),_("code",[e._v("Nginx")]),e._v(" 来压缩文件，会耗费服务器的计算资源，如果服务器的 "),_("code",[e._v("gzip_comp_level")]),e._v(" 配置的比较高，就更增加服务器的开销，相应增加客户端的请求时间，得不偿失。")]),e._v(" "),_("p",[e._v("如果压缩的动作在前端打包的时候就做了，把打包之后的高压缩等级文件作为静态资源放在服务器上，Nginx 会优先查找这些压缩之后的文件返回给客户端，相当于把压缩文件的动作从 "),_("code",[e._v("Nginx")]),e._v(" 提前给 "),_("code",[e._v("Webpack")]),e._v(" 打包的时候完成，节约了服务器资源，所以一般推介在生产环境应用 "),_("code",[e._v("Webpack")]),e._v(" 配置 "),_("code",[e._v("gzip")]),e._v(" 压缩。")]),e._v(" "),_("h2",{attrs:{id:"_10-配置负载均衡"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-配置负载均衡"}},[e._v("#")]),e._v(" 10. 配置负载均衡")]),e._v(" "),_("p",[e._v("负载均衡在之前已经介绍了相关概念了，主要思想就是把负载均匀合理地分发到多个服务器上，实现压力分流的目的。")]),e._v(" "),_("p",[e._v("主要配置如下：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("http {\n  upstream myserver {\n    # ip_hash;  # ip_hash 方式\n    # fair;   # fair 方式\n    server 127.0.0.1:8081;  # 负载均衡目的服务地址\n    server 127.0.0.1:8080;\n    server 127.0.0.1:8082 weight=10;  # weight 方式，不写默认为 1\n  }\n \n  server {\n    location / {\n        proxy_pass http://myserver;\n      proxy_connect_timeout 10;\n    }\n  }\n}\n")])])]),_("p",[e._v("Nginx 提供了好几种分配方式，默认为"),_("code",[e._v("轮询")]),e._v("，就是轮流来。有以下几种分配方式：")]),e._v(" "),_("ol",[_("li",[e._v("轮询，默认方式，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务挂了，能自动剔除；")]),e._v(" "),_("li",[_("code",[e._v("weight")]),e._v("，权重分配，指定轮询几率，权重越高，在被访问的概率越大，用于后端服务器性能不均的情况；")]),e._v(" "),_("li",[_("code",[e._v("ip_hash")]),e._v("，每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决动态网页 session 共享问题。负载均衡每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的；")]),e._v(" "),_("li",[_("code",[e._v("fair")]),e._v("（第三方），按后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件 nginx-upstream-fair，需要先安装；")])]),e._v(" "),_("h2",{attrs:{id:"_11-配置动静分离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-配置动静分离"}},[e._v("#")]),e._v(" 11. 配置动静分离")]),e._v(" "),_("p",[e._v("动静分离在之前也介绍过了，就是把动态和静态的请求分开。方式主要有两种，一种 是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。另外一种方法就是动态跟静态文件混合在一起发布， 通过 Nginx 配置来分开。")]),e._v(" "),_("p",[e._v("通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化。则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("server {\n  location /www/ {\n    root /data/;\n    index index.html index.htm;\n  }\n  \n  location /image/ {\n    root /data/;\n    autoindex on;\n  }\n}\n")])])]),_("h2",{attrs:{id:"_12-配置高可用集群（双机热备）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-配置高可用集群（双机热备）"}},[e._v("#")]),e._v(" 12. 配置高可用集群（双机热备）")]),e._v(" "),_("p",[e._v("当主 Nginx 服务器宕机之后，切换到备份 Nginx 服务器")]),e._v(" "),_("p",[e._v("首先安装 keepalived，")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("yum install keepalived -y\n")])])]),_("p",[e._v("然后编辑 "),_("code",[e._v("/etc/keepalived/keepalived.conf")]),e._v(" 配置文件，并在配置文件中增加 "),_("code",[e._v("vrrp_script")]),e._v(" 定义一个外围检测机制，并在 "),_("code",[e._v("vrrp_instance")]),e._v(" 中通过定义 "),_("code",[e._v("track_script")]),e._v(" 来追踪脚本执行过程，实现节点转移：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v('global_defs{\n   notification_email {\n        acassen@firewall.loc\n   }\n   notification_email_from Alexandre@firewall.loc\n   smtp_server 127.0.0.1\n   smtp_connect_timeout 30 // 上面都是邮件配置，没卵用\n   router_id LVS_DEVEL     // 当前服务器名字，用hostname命令来查看\n}\nvrrp_script chk_maintainace { // 检测机制的脚本名称为chk_maintainace\n    script "[[ -e/etc/keepalived/down ]] && exit 1 || exit 0" // 可以是脚本路径或脚本命令\n    // script "/etc/keepalived/nginx_check.sh"    // 比如这样的脚本路径\n    interval 2  // 每隔2秒检测一次\n    weight -20  // 当脚本执行成立，那么把当前服务器优先级改为-20\n}\nvrrp_instanceVI_1 {   // 每一个vrrp_instance就是定义一个虚拟路由器\n    state MASTER      // 主机为MASTER，备用机为BACKUP\n    interface eth0    // 网卡名字，可以从ifconfig中查找\n    virtual_router_id 51 // 虚拟路由的id号，一般小于255，主备机id需要一样\n    priority 100      // 优先级，master的优先级比backup的大\n    advert_int 1      // 默认心跳间隔\n    authentication {  // 认证机制\n        auth_type PASS\n        auth_pass 1111   // 密码\n    }\n    virtual_ipaddress {  // 虚拟地址vip\n       172.16.2.8\n    }\n}\n')])])]),_("p",[e._v("其中检测脚本 "),_("code",[e._v("nginx_check.sh")]),e._v("，这里提供一个：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("#!/bin/bash\nA=`ps -C nginx --no-header | wc -l`\nif [ $A -eq 0 ];then\n    /usr/sbin/nginx # 尝试重新启动nginx\n    sleep 2         # 睡眠2秒\n    if [ `ps -C nginx --no-header | wc -l` -eq 0 ];then\n        killall keepalived # 启动失败，将keepalived服务杀死。将vip漂移到其它备份节点\n    fi\nfi\n")])])]),_("p",[e._v("复制一份到备份服务器，备份 "),_("code",[e._v("Nginx")]),e._v(" 的配置要将 "),_("code",[e._v("state")]),e._v(" 后改为 "),_("code",[e._v("BACKUP")]),e._v("，"),_("code",[e._v("priority")]),e._v(" 改为比主机小。")]),e._v(" "),_("p",[e._v("设置完毕后各自 "),_("code",[e._v("service keepalived start")]),e._v(" 启动，经过访问成功之后，可以把 "),_("code",[e._v("Master")]),e._v(" 机的 "),_("code",[e._v("keepalived")]),e._v(" 停掉，此时 "),_("code",[e._v("Master")]),e._v(" 机就不再是主机了 "),_("code",[e._v("service keepalived stop")]),e._v("，看访问虚拟 "),_("code",[e._v("IP")]),e._v(" 时是否能够自动切换到备机 "),_("code",[e._v("ip addr")]),e._v("。")]),e._v(" "),_("p",[e._v("再次启动 Master 的 keepalived，此时 vip 又变到了主机上。")]),e._v(" "),_("h2",{attrs:{id:"_13-适配-pc-或移动设备"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13-适配-pc-或移动设备"}},[e._v("#")]),e._v(" 13. 适配 PC 或移动设备")]),e._v(" "),_("p",[e._v("根据用户设备不同返回不同样式的站点，以前经常使用的是纯前端的自适应布局，但无论是复杂性和易用性上面还是不如分开编写的好，比如我们常见的淘宝、京东......这些大型网站就都没有采用自适应，而是用分开制作的方式，根据用户请求的 "),_("code",[e._v("user-agent")]),e._v(" 来判断是返回 "),_("code",[e._v("PC")]),e._v(" 还是 "),_("code",[e._v("H5")]),e._v(" 站点。")]),e._v(" "),_("p",[e._v("首先在 "),_("code",[e._v("/usr/share/nginx/html")]),e._v(" 文件夹下 "),_("code",[e._v("mkdir")]),e._v(" 分别新建两个文件夹 "),_("code",[e._v("PC")]),e._v(" 和 "),_("code",[e._v("mobile，vim")]),e._v(" 编辑两个 "),_("code",[e._v("index.html")]),e._v(" 随便写点内容。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("cd /usr/share/nginx/html\nmkdir pc mobile\ncd pc\nvim index.html   # 随便写点比如 hello pc!\ncd ../mobile\nvim index.html   # 随便写点比如 hello mobile!\n")])])]),_("p",[e._v("然后和设置二级域名虚拟主机时候一样，去 "),_("code",[e._v("/etc/nginx/conf.d")]),e._v(" 文件夹下新建一个配置文件 "),_("code",[e._v("fe.sherlocked93.club.conf")]),e._v(" ：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# /etc/nginx/conf.d/fe.sherlocked93.club.conf\n\nserver {\n  listen 80;\n    server_name fe.sherlocked93.club;\n\n    location / {\n        root  /usr/share/nginx/html/pc;\n    if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {\n      root /usr/share/nginx/html/mobile;\n    }\n        index index.html;\n    }\n}\n")])])]),_("p",[e._v("配置基本没什么不一样的，主要多了一个 "),_("code",[e._v("if")]),e._v(" 语句，然后使用 "),_("code",[e._v("$http_user_agent")]),e._v(" 全局变量来判断用户请求的 "),_("code",[e._v("user-agent")]),e._v("，指向不同的 "),_("code",[e._v("root")]),e._v(" 路径，返回对应站点。")]),e._v(" "),_("p",[e._v("在浏览器访问这个站点，然后 "),_("code",[e._v("F12")]),e._v(" 中模拟使用手机访问：\n"),_("img",{attrs:{src:"http://img.zwjblog.top/FoSq0CdWUEDufFWHB6zhEZ8-vxen",alt:""}})]),e._v(" "),_("p",[e._v("可以看到在模拟使用移动端访问的时候，"),_("code",[e._v("Nginx")]),e._v(" 返回的站点变成了移动端对应的 "),_("code",[e._v("html")]),e._v(" 了。")]),e._v(" "),_("h2",{attrs:{id:"_14-配置-https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14-配置-https"}},[e._v("#")]),e._v(" 14. 配置 HTTPS")]),e._v(" "),_("p",[e._v("具体配置过程网上挺多的了，也可以使用你购买的某某云，一般都会有免费申请的服务器证书，安装直接看所在云的操作指南即可。")]),e._v(" "),_("p",[e._v("我购买的腾讯云提供的亚洲诚信机构颁发的免费证书只能一个域名使用，二级域名什么的需要另外申请，但是申请审批比较快，一般几分钟就能成功，然后下载证书的压缩文件，里面有个 nginx 文件夹，把 xxx.crt 和 xxx.key 文件拷贝到服务器目录，再配置下：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("server {\n  listen 443 ssl http2 default_server;   # SSL 访问端口号为 443\n  server_name sherlocked93.club;         # 填写绑定证书的域名\n\n  ssl_certificate /etc/nginx/https/1_sherlocked93.club_bundle.crt;   # 证书文件地址\n  ssl_certificate_key /etc/nginx/https/2_sherlocked93.club.key;      # 私钥文件地址\n  ssl_session_timeout 10m;\n\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;      #请按照以下协议配置\n  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n  ssl_prefer_server_ciphers on;\n  \n  location / {\n    root         /usr/share/nginx/html;\n    index        index.html index.htm;\n  }\n}\n")])])]),_("p",[e._v("写完 "),_("code",[e._v("nginx -t -q")]),e._v(" 校验一下，没问题就 "),_("code",[e._v("nginx -s reload")]),e._v("，现在去访问 "),_("code",[e._v("https://sherlocked93.club/")]),e._v(" 就能访问 HTTPS 版的网站了。")]),e._v(" "),_("p",[e._v("一般还可以加上几个增强安全性的命令：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("add_header X-Frame-Options DENY;           # 减少点击劫持\nadd_header X-Content-Type-Options nosniff; # 禁止服务器自动解析资源类型\nadd_header X-Xss-Protection 1;             # 防XSS攻击\n")])])]),_("h2",{attrs:{id:"_15-一些常用技巧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-一些常用技巧"}},[e._v("#")]),e._v(" 15. 一些常用技巧")]),e._v(" "),_("h3",{attrs:{id:"_15-1-静态服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-静态服务"}},[e._v("#")]),e._v(" 15.1 静态服务")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("server {\n  listen       80;\n  server_name  static.sherlocked93.club;\n  charset utf-8;    # 防止中文文件名乱码\n\n  location /download {\n    alias\t          /usr/share/nginx/html/static;  # 静态资源目录\n    \n    autoindex               on;    # 开启静态资源列目录\n    autoindex_exact_size    off;   # on(默认)显示文件的确切大小，单位是byte；off显示文件大概大小，单位KB、MB、GB\n    autoindex_localtime     off;   # off(默认)时显示的文件时间为GMT时间；on显示的文件时间为服务器时间\n  }\n}\n")])])]),_("h3",{attrs:{id:"_15-2-图片防盗链"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-图片防盗链"}},[e._v("#")]),e._v(" 15.2 图片防盗链")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("server {\n  listen       80;\n  server_name  *.sherlocked93.club;\n  \n  # 图片防盗链\n  location ~* \\.(gif|jpg|jpeg|png|bmp|swf)$ {\n    valid_referers none blocked 192.168.0.2;  # 只允许本机 IP 外链引用\n    if ($invalid_referer){\n      return 403;\n    }\n  }\n}\n")])])]),_("h3",{attrs:{id:"_15-3-请求过滤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-请求过滤"}},[e._v("#")]),e._v(" 15.3 请求过滤")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# 非指定请求全返回 403\nif ( $request_method !~ ^(GET|POST|HEAD)$ ) {\n  return 403;\n}\n\nlocation / {\n  # IP访问限制（只允许IP是 192.168.0.2 机器访问）\n  allow 192.168.0.2;\n  deny all;\n  \n  root   html;\n  index  index.html index.htm;\n}\n")])])]),_("h3",{attrs:{id:"_15-4-配置图片、字体等静态文件缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-配置图片、字体等静态文件缓存"}},[e._v("#")]),e._v(" 15.4 配置图片、字体等静态文件缓存")]),e._v(" "),_("p",[e._v("由于图片、字体、音频、视频等静态文件在打包的时候通常会增加了 "),_("code",[e._v("hash")]),e._v("，所以缓存可以设置的长一点，先设置强制缓存，再设置协商缓存；如果存在没有 "),_("code",[e._v("hash")]),e._v(" 值的静态文件，建议不设置强制缓存，仅通过协商缓存判断是否需要使用缓存。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("# 图片缓存时间设置\nlocation ~ .*\\.(css|js|jpg|png|gif|swf|woff|woff2|eot|svg|ttf|otf|mp3|m4a|aac|txt)$ {\n    expires 10d;\n}\n\n# 如果不希望缓存\nexpires -1;\n15.5 单页面项目 history 路由配置\nserver {\n  listen       80;\n  server_name  fe.sherlocked93.club;\n  \n  location / {\n    root       /usr/share/nginx/html/dist;  # vue 打包后的文件夹\n    index      index.html index.htm;\n    try_files  $uri $uri/ /index.html @rewrites;\n    \n    expires -1;                          # 首页一般没有强制缓存\n    add_header Cache-Control no-cache;\n  }\n  \n  # 接口转发，如果需要的话\n  #location ~ ^/api {\n  #  proxy_pass http://be.sherlocked93.club;\n  #}\n  \n  location @rewrites {\n    rewrite ^(.+)$ /index.html break;\n  }\n}\n")])])]),_("h1",{attrs:{id:"_15-6-http-请求转发到-https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-6-http-请求转发到-https"}},[e._v("#")]),e._v(" 15.6 HTTP 请求转发到 HTTPS")]),e._v(" "),_("p",[e._v("配置完 "),_("code",[e._v("HTTPS")]),e._v(" 后，浏览器还是可以访问 "),_("code",[e._v("HTTP")]),e._v(" 的地址 "),_("code",[e._v("http://sherlocked93.club/")]),e._v(" 的，可以做一个 "),_("code",[e._v("301")]),e._v(" 跳转，把对应域名的 "),_("code",[e._v("HTTP")]),e._v(" 请求重定向到 "),_("code",[e._v("HTTPS")]),e._v(" 上")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("server {\n    listen      80;\n    server_name www.sherlocked93.club;\n\n    # 单域名重定向\n    if ($host = 'www.sherlocked93.club'){\n        return 301 https://www.sherlocked93.club$request_uri;\n    }\n    # 全局非 https 协议时重定向\n    if ($scheme != 'https') {\n        return 301 https://$server_name$request_uri;\n    }\n\n    # 或者全部重定向\n    return 301 https://$server_name$request_uri;\n\n    # 以上配置选择自己需要的即可，不用全部加\n}\n")])])]),_("h3",{attrs:{id:"_15-7-泛域名路径分离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-7-泛域名路径分离"}},[e._v("#")]),e._v(" 15.7 泛域名路径分离")]),e._v(" "),_("p",[e._v("这是一个非常实用的技能，经常有时候我们可能需要配置一些二级或者三级域名，希望通过 "),_("code",[e._v("Nginx")]),e._v(" 自动指向对应目录，比如：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("test1.doc.sherlocked93.club 自动指向 /usr/share/nginx/html/doc/test1 服务器地址；\ntest2.doc.sherlocked93.club 自动指向 /usr/share/nginx/html/doc/test2 服务器地址；\nserver {\n    listen       80;\n    server_name  ~^([\\w-]+)\\.doc\\.sherlocked93\\.club$;\n\n    root /usr/share/nginx/html/doc/$1;\n}\n")])])]),_("h3",{attrs:{id:"_15-8-泛域名转发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-8-泛域名转发"}},[e._v("#")]),e._v(" 15.8 泛域名转发")]),e._v(" "),_("p",[e._v("和之前的功能类似，有时候我们希望把二级或者三级域名链接重写到我们希望的路径，让后端就可以根据路由解析不同的规则：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("test1.serv.sherlocked93.club/api?name=a 自动转发到 127.0.0.1:8080/test1/api?name=a ；\ntest2.serv.sherlocked93.club/api?name=a 自动转发到 127.0.0.1:8080/test2/api?name=a ；\nserver {\n    listen       80;\n    server_name ~^([\\w-]+)\\.serv\\.sherlocked93\\.club$;\n\n    location / {\n        proxy_set_header        X-Real-IP $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        Host $http_host;\n        proxy_set_header        X-NginX-Proxy true;\n        proxy_pass              http://127.0.0.1:8080/$1$request_uri;\n    }\n}\n")])])]),_("h2",{attrs:{id:"_16-最佳实践"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16-最佳实践"}},[e._v("#")]),e._v(" 16. 最佳实践")]),e._v(" "),_("p",[e._v("为了使 "),_("code",[e._v("Nginx")]),e._v(" 配置更易于维护，建议为每个服务创建一个单独的配置文件，存储在 "),_("code",[e._v("/etc/nginx/conf.d")]),e._v(" 目录，根据需求可以创建任意多个独立的配置文件。\n独立的配置文件，建议遵循以下命名约定 "),_("code",[e._v("<服务>.conf")]),e._v("，比如域名是 "),_("code",[e._v("sherlocked93.club")]),e._v("，那么你的配置文件的应该是这样的 "),_("code",[e._v("/etc/nginx/conf.d/sherlocked93.club.conf")]),e._v("，如果部署多个服务，也可以在文件名中加上 "),_("code",[e._v("Nginx")]),e._v(" 转发的端口号，比如 "),_("code",[e._v("sherlocked93.club.8080.conf")]),e._v("，如果是二级域名，建议也都加上 "),_("code",[e._v("fe.sherlocked93.club.conf")]),e._v("。\n常用的、复用频率比较高的配置可以放到 "),_("code",[e._v("/etc/nginx/snippets")]),e._v(" 文件夹，在 "),_("code",[e._v("Nginx")]),e._v(" 的配置文件中需要用到的位置 "),_("code",[e._v("include")]),e._v(" 进去，以功能来命名，并在每个 "),_("code",[e._v("snippet")]),e._v(" 配置文件的开头注释标明主要功能和引入位置，方便管理。比如之前的 "),_("code",[e._v("gzip、cors")]),e._v(" 等常用配置，我都设置了 "),_("code",[e._v("snippet")]),e._v("。\n"),_("code",[e._v("Nginx")]),e._v(" 日志相关目录，内以 域名"),_("code",[e._v(".type.log")]),e._v(" 命名（比如 "),_("code",[e._v("be.sherlocked93.club.access.log")]),e._v(" 和 "),_("code",[e._v("be.sherlocked93.club.error.log")]),e._v(" ）位于 "),_("code",[e._v("/var/log/nginx/")]),e._v(" 目录中，为每个独立的服务配置不同的访问权限和错误日志文件，这样查找错误时，会更加方便快捷。")])])}),[],!1,null,null,null);n.default=v.exports}}]);